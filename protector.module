<?php

/**
 * @file
 * Contains protector.module.
 */

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Site\Settings;
use Drupal\shield\ShieldMiddleware;

/**
 * Implements hook_help().
 */
function protector_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the protector module.
    case 'help.page.protector':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('enables shield if core updates are available') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function protector_theme() {
  return [
    'protector' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_cron().
*/
function protector_cron() {
$config_shield = \Drupal::configFactory()->getEditable('shield.settings');
$config_protector = \Drupal::configFactory()->getEditable('protector.settings');
$pass = $config_shield->get('credentials.shield.pass');
$name = $config_shield->get('credentials.shield.user');
$login = $config_protector->get('login');
$password = $config_protector->get('password');
$state = $config_protector->get('state');
if ($state == 1) {
  if (empty($login)) {
  drupal_set_message(t("Your shield is enabled but has no credentials to protect your site. Please, <a href='/admin/config/system/shield'>fill the form </a>"));
  } else {
  drupal_set_message(t("Your site is protected by shield "));
  }
} 
else {
  module_load_include('inc', 'update', 'update.report');
  $available = update_get_available(TRUE);
  $data = update_calculate_project_data($available);
    if ($data[drupal][existing_version] != $data[drupal][latest_version]) {
      if (empty($login)) {
      drupal_set_message(t("There are new vulnerabilties for core but we have no credentials to protect the project. Please <a href='/admin/config/system/shield'> fill the form </a>"));
      } else {
      $config_shield->set('credentials.shield.user', $login)->save(TRUE);
      $config_shield->set('credentials.shield.pass', $password)->save(TRUE);
      drupal_set_message(t("There are new vulnerabilties for core and we use shield to protect the project"));
      }      
    } else {
      $config_shield->clear('credentials.shield.user')->save(TRUE);
      $config_shield->clear('credentials.shield.pass')->save(TRUE);
      drupal_set_message(t("Your core is updated and don`t need in shield for this moment"));
    } 
}
}


/**
 * Implements hook_form_alter().
*/
function protector_form_shield_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config_protector = \Drupal::configFactory()->getEditable('protector.settings');
  $state = $config_protector->get('state');
    $form['general']['activate'] = [
      '#type' => 'radios',
      '#title' => t('Shield is activated'),
      '#default_value' => $state ? 1 : 0, // get the value from settings
      '#options' => [
        '0' => t('Disabled'),
        '1' => t('Enabled'),
      ],
    ];
     $form['#submit'][] = '_protector_form_shield_admin_settings_submit';
}


function _protector_form_shield_admin_settings_submit($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $config_protector = \Drupal::configFactory()->getEditable('protector.settings');
  $config_protector->set('state', $values['general']['activate']);
  $config_protector->save(TRUE);
  $config_shield = \Drupal::configFactory()->getEditable('shield.settings');
  $name = $config_shield->get('credentials.shield.user');
  $pass = $config_shield->get('credentials.shield.pass');
  $login = $config_protector->get('login');
  $password = $config_protector->get('password');
  $state = $config_protector->get('state');

  if (empty($name)) {
   $config_protector->clear('login')->save(TRUE);
   drupal_set_message(t("Shield will not work without login. Please enter it"));
  } else {
    $config_protector->set('login', $name)->save(TRUE);
    $config_protector->set('password', $pass)->save(TRUE);
    if ($state == 1) { 
        drupal_set_message(t("Your Shield is raised"));
    } else {
      $config_shield->clear('credentials.shield.user')->save(TRUE);
      $config_shield->clear('credentials.shield.pass')->save(TRUE);
        drupal_set_message(t("Shield is disabled now but will be activated if there is new core update"));
        \Drupal::logger('prot')->notice(print_r($login, TRUE));

    }
  }
  }
